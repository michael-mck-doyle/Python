__ References for API tutorials __


- "curl" is a tool to transfer data from or to a server, using one of the supported protocols (DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, MQTT, POP3, POP3S, RTMP, RTMPS, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS, TELNET and TFTP).
 The command is designed to work without user interaction - https://curl.haxx.se/docs/manpage.html
 - "Swagger" - Simplify API development for users, teams, and enterprises with the Swagger open source and professional toolset.
  Find out how Swagger can help you design and document your APIs at scale.

__ URL's __
Yahoo Developer YQL - https://developer.yahoo.com/yql/guide/users-overview.html
URL Decoder/Encoder - https://meyerweb.com/eric/tools/dencoder/
Test RESTful Web services - https://www.jetbrains.com/help/pycharm/testing-restful-web-services.html
HTTP client in PyCharm code editor - https://www.jetbrains.com/help/pycharm/http-client-in-product-code-editor.html#
Node.JS - https://nodejs.org/en/
NPM (Node package manage) - https://www.npmjs.com/
curl - https://curl.haxx.se/docs/manpage.html
Swagger - API Development for everyone - https://swagger.io/
Cross Browser Testing - https://crossbrowsertesting.com/


__ Student App for Postmam Tutorials __
Student app - http://localhost:8080/student/list (start application first by typing java -jar rest.jar from Terminal)
 - if the app is running correctly you will see a list of student names.  It is possible to start the application on another
 port, for instance if port 8080 is being used by another application.  To start the app on a port of your choice you can enter
 java -jar rest.jar --server.port=(enter port of your choosing here)

 __ Docker __
Docker docs - https://docs.docker.com/

_ Opening Student App Using Docker _
go to docker hub then search for "tejasn1" - copy the command "docker pull tejasn1/student-app" and run in Terminal window.
Steps:
1. run "Docker" first
2. run command "docker pull tejasn1/student-app" - this will pull down the Student App image from DockerHub to your local machine
3. type in "docker images" to view all of the Docker images on your system
4. run the "Student App" container using "docker run -p 8085:8080 -d tejasn1/student-app" - "8085" represents the port the Student App will
 be running on.  You can change this to any other valid port number that is not in use.  "-d" means run the app in the background.
5. type "docker ps" to view the docker containers which are running
6. open a browser session and enter "http://localhost:8085/student/list" to view the Student App and check it is running (it is just a list of
 mock student profiles)
7. to stop an app running in a Docker container type "Docker container stop 'container ID' " - the container ID can be viewed after typing the "Docker ps" command

__ Best Buy App Instructions __
1. clone BestBuy/api-playground repository - https://github.com/BestBuy/api-playground
2. check you have node js installed - type: "node -v", otherwise download from https://nodejs.org/en/
   to update Node.js use:
   Node.jsÂ® is a JavaScript runtime built on Chrome's V8 JavaScript engine.
3. Also check you have npm installed: "npm -v" - to update npm: "npm install -g npm to update"
4. type "npm start" to start the Best Buy API Playground - when it starts you will receive a message
    like: "Best Buy API Playground started at http://localhost:3030".  You can copy the url and check the app is running
    in your browser.
5.


__ Web-Socket API vs RESTful API __
WebSockets vs REST: Understanding the Difference - https://www.pubnub.com/blog/websockets-vs-rest-api-understanding-the-difference/


__ WebSocket frameworks __
The WebSocket API (WebSockets) - https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API
 - the above contains a lot of tools that can be used in building web-socket API's
WebSocket frameworks
Socket Programming in Python - https://www.geeksforgeeks.org/socket-programming-python/
Why you need a framework with your WebSockets - https://hackernoon.com/why-you-need-a-framework-with-your-websockets-98330827e3e
Why use WebSockets? - https://www.fullstackpython.com/websockets.html
